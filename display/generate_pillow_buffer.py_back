#!/usr/bin/env python3
#-*- coding:utf-8 -*-

from PIL import Image
import sys
import os
import qrcode
import spilcd

'''
	通过qrcode生成二维码信息，不用保存图片，将生成
	图片信息的点阵作为spilcd的输入来显示二维码
'''
def create_2vcode_return_matrix(msg:str)->list:
	#box_size是表示每个点的值的正方形色块的长宽，border代表最外层的白色边框的宽度是几个box_size
	qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=0)
	qr.add_data(data=msg)
	qr.make(fit=True)
	s = qr.get_matrix()
	return s

def show_matrix_on_screen(imgmsg:str)->None:
	matrix = create_2vcode_return_matrix(imgmsg)
	spilcd.display(matrix)

'''
	输入信息通过qrcode生成图像信息并通过PIL生成图像的object，
	PIL模块读取该object获取像素信息
'''
def create_2vcode_save_image(msg:str)->object:
	#box_size是表示每个点的值的正方形色块的长宽，border代表最外层的白色边框的宽度是几个box_size
	qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=0)
	qr.add_data(data=msg)
	qr.make(fit=True)
	img = qr.make_image(fill_color="green", back_color="white")
	#img.save("/root/2vcode_temp.jpg")
	return img

def show_qrcode_2vcode_on_screen(msg:str)->None:
	im = create_2vcode_save_image(msg)
	im = im.convert('L')
	im = im.resize((160, 160))
	imgbuffer = []
	for row in range(160):
		#for col in range(160, 0):
		col = 160
		line = []
		while col > 0:
			col -= 1
			pv = im.getpixel((col, row))
			
			if pv < 180:
				line.append(0xf)
			else:
				line.append(0x0)	
		imgbuffer.append(line)
	#print(imgbuffer)
	spilcd.show(imgbuffer)

'''
	输入图片的路径，通过PIL模块对图片处理
	获取图像像素信息
'''
def show_image_on_screen(filename:str, fullscreen:bool, keepshape:bool)->None:
	if not os.path.exists(filename):
		print("file not exists!")
		exit(1)
	
	imgbuffer = []
	im = Image.open(filename)
	im = im.convert('L')
	(w, h) = im.size
	print("img col={},row={}".format(im.size[0], im.size[1]))
	f = 0.00
	r = 0
	if w != h:
		r = max(w, h)
		f = 160 / r
	else:
		f = 160 / w
	
	#是否改变图片的小大
	if fullscreen == False:
		if keepshape == True:
			im = im.resize((int(w * f), int(h * f)))
		else:
			im = im.resize((160, 160))
	else:
		if r > 160:
			print("image too big")
			exit(1)

	im.save("output.jpg")

	(w, h) = im.size
	img = []

	for r in range(h):
		l = []
		for c in range(w):
			pv = im.getpixel((c, r))
			if pv > 180:
				l.append(0xf)
			else:
				l.append(0x0)
		img.append(l)

	'''
	将图片的像素点放置在屏幕的中央
	'''
	left = int((160 - w) / 2)
	top = int((160 - h) / 2)

	for row in range(160):

		if row < top or row > (160 - top):
			imgbuffer.append([0xf] * 160)
		else:
			col = 160
			line = []
			while col > 0:
				col -= 1
				#if col < left or col > (160 - left):

				pv = im.getpixel((col, row))
				if pv > 180:
					line.append(0xf)
				else:
					line.append(0x0)
			imgbuffer.append(line)
	#print(imgbuffer)
	spilcd.show(imgbuffer)


if __name__ == "__main__":
	if len(sys.argv) < 2:
		print("please input image path")
		exit(1)
	#print("file name:{}".format(sys.argv[1]))	
	c = sys.argv[2]
	print("c={}".format(c))
	if c == '1':
		show_image_on_screen(sys.argv[1], fullscreen=False, keepshape=True)
	elif c == '2':
		show_qrcode_2vcode_on_screen(sys.argv[1])
	else:
		show_matrix_on_screen(sys.argv[1])
